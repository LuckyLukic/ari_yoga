// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* =========================
   ENUM
========================= */
enum Role {
  user
  admin
}

enum Plan {
  free
  premium
}

/* =========================
   USER & NEXTAUTH
========================= */
model User {
  id               String   @id @default(cuid())
  name             String?
  email            String?  @unique
  emailVerified    DateTime?
  image            String?

  // App profile
  role             Role     @default(user)
  plan             Plan     @default(free)
  address          String?
  city             String?
  zip              String?
  taxCode          String?
  phone            String?
  consents         Json?
  profileCompleted Boolean  @default(false)

  // Credentials (per provider "credentials")
  passwordHash     String?  @db.Text

  // Timestamps
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  accounts         Account[]
  sessions         Session[]
  playlists        Playlist[]
  videos           Video[]  @relation("UploaderVideos")

  @@index([role])
  @@index([plan])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/* =========================
   CONTENUTI
========================= */
model Video {
  id            String   @id @default(cuid())
  title         String
  slug          String   @unique
  description   String?  @db.Text

  // Campi usati in UI
  durationMin   Int?
  level         String?          // "Base" | "Intermedio" | "Avanzato" (libero lato app)
  premium       Boolean  @default(false)  // true = solo per utenti premium
  posterUrl     String?
  srcUrl        String?

  visibility    String   @default("public") // "public" | "unlisted" | "private"
  tags          String[] @default([])

  uploaderId    String?
  uploader      User?    @relation("UploaderVideos", fields: [uploaderId], references: [id], onDelete: SetNull)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  playlistItems PlaylistItem[]

  @@index([premium])
  @@index([visibility])
  @@index([createdAt])
}

model Playlist {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String?  @db.Text

  // Owner
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // Tipologia e visibilit√†
  isSystem    Boolean  @default(false)       // true = playlist editoriale dell'admin
  visibility  String   @default("private")   // "public" | "unlisted" | "private"

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  items       PlaylistItem[]

  @@index([ownerId])
  @@index([isSystem])
  @@index([visibility])
}

model PlaylistItem {
  id         String   @id @default(cuid())
  playlistId String
  videoId    String
  position   Int

  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())

  @@unique([playlistId, videoId])      // un video una volta per playlist
  @@unique([playlistId, position])     // no posizioni duplicate
  @@index([playlistId, position])      // ordinamento efficiente
}
